{"ast":null,"code":"import { ADD_LIST, GET_LISTS, GET_LIST_BY_ID, SET_LISTID_TO_DELETE, SET_LIST_TO_EDIT, DELETE_LIST, UPDATE_LIST, SET_SELECTED_LIST, ADD_TASK, SET_TASK_TO_DELETE, UNSET_TASK_TO_DELETE, DELETE_TASK, SET_TASK_TO_EDIT, UNSET_TASK_TO_EDIT, UPDATE_TASK } from \"../types\";\nconst initialState = {\n  lists: {},\n  listIdToDelete: '',\n  listToEdit: null,\n  listById: null,\n  selectedList: null,\n  taskToDelete: null,\n  taskToEdit: null\n}; // Helper functions\n\nconst getListsFromLS = () => {\n  if (localStorage.getItem('task_list')) {\n    return JSON.parse(localStorage.getItem('task_list') || '{}');\n  }\n\n  return {};\n};\n\nconst saveListsToLS = lists => {\n  localStorage.setItem('task_list', JSON.stringify(lists));\n};\n\nexport default ((state = initialState, action) => {\n  const listsFromLS = getListsFromLS();\n\n  switch (action.type) {\n    case ADD_LIST:\n      const clonedListsFromLS = { ...listsFromLS\n      };\n      clonedListsFromLS[action.payload.id] = action.payload;\n      saveListsToLS(clonedListsFromLS);\n      return { ...state,\n        lists: clonedListsFromLS\n      };\n\n    case GET_LISTS:\n      return { ...state,\n        lists: listsFromLS\n      };\n\n    case GET_LIST_BY_ID:\n      const list = listsFromLS[action.payload];\n      return { ...state,\n        listById: list\n      };\n\n    case SET_LISTID_TO_DELETE:\n      return { ...state,\n        listIdToDelete: action.payload\n      };\n\n    case SET_LIST_TO_EDIT:\n      const listToEdit = listsFromLS[action.payload];\n      return { ...state,\n        listToEdit\n      };\n\n    case DELETE_LIST:\n      const clonedListsFromLS2 = { ...listsFromLS\n      };\n      const listId = clonedListsFromLS2[action.payload].id;\n      delete clonedListsFromLS2[action.payload];\n      saveListsToLS(clonedListsFromLS2);\n      return { ...state,\n        lists: clonedListsFromLS2,\n        listIdToDelete: '',\n        listById: null,\n        selectedList: state.selectedList && listId === state.selectedList.id ? null : state.selectedList\n      };\n\n    case UPDATE_LIST:\n      const clonedListsFromLS3 = { ...listsFromLS\n      };\n      clonedListsFromLS3[action.payload.id].name = action.payload.name;\n      saveListsToLS(clonedListsFromLS3);\n      return { ...state,\n        lists: clonedListsFromLS3,\n        listToEdit: null\n      };\n\n    case SET_SELECTED_LIST:\n      const selectedList = getListsFromLS()[action.payload];\n      return { ...state,\n        selectedList: selectedList\n      };\n\n    case ADD_TASK:\n      const clonedListsFromLS4 = { ...listsFromLS\n      };\n      clonedListsFromLS4[action.payload.list.id].tasks.push(action.payload.task);\n      saveListsToLS(clonedListsFromLS4);\n      return { ...state,\n        lists: clonedListsFromLS4,\n        selectedList: clonedListsFromLS4[action.payload.list.id]\n      };\n\n    case SET_TASK_TO_DELETE:\n      return { ...state,\n        taskToDelete: {\n          task: action.payload.task,\n          list: action.payload.list\n        }\n      };\n\n    case UNSET_TASK_TO_DELETE:\n      return { ...state,\n        taskToDelete: null\n      };\n\n    case DELETE_TASK:\n      const clonedListsFromLS5 = { ...listsFromLS\n      };\n      const clonedTasks = [...clonedListsFromLS5[state.taskToDelete.list.id].tasks];\n      const task = clonedTasks.find(task => task.id === state.taskToDelete.task.id);\n      clonedTasks.splice(clonedTasks.indexOf(task), 1);\n      clonedListsFromLS5[state.taskToDelete.list.id].tasks = clonedTasks;\n      saveListsToLS(clonedListsFromLS5);\n      return { ...state,\n        lists: clonedListsFromLS5,\n        selectedList: clonedListsFromLS5[state.taskToDelete.list.id],\n        taskToDelete: null\n      };\n\n    case SET_TASK_TO_EDIT:\n      return { ...state,\n        taskToEdit: {\n          task: action.payload.task,\n          list: action.payload.list\n        }\n      };\n\n    case UNSET_TASK_TO_EDIT:\n      return { ...state,\n        taskToEdit: null\n      };\n\n    case UPDATE_TASK:\n      const clonedListsFromLS6 = { ...listsFromLS\n      };\n      const clonedList = { ...clonedListsFromLS6[action.payload.list.id]\n      };\n      const clonedTasks2 = [...clonedList.tasks];\n      const task2 = clonedTasks2.find(task => task.id === action.payload.taskId);\n      const clonedTask = { ...task2\n      };\n      clonedTask.name = action.payload.taskName;\n      clonedTask.completed = action.payload.taskState;\n      const updatedTasks = clonedTasks2.map(task => task.id === clonedTask.id ? clonedTask : task);\n      clonedList.tasks = updatedTasks;\n      clonedListsFromLS6[clonedList.id] = clonedList;\n      saveListsToLS(clonedListsFromLS6);\n      return { ...state,\n        lists: clonedListsFromLS6,\n        selectedList: clonedList,\n        taskToEdit: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/cyriljaison/Desktop/test/task-list-react-typescript/src/store/reducers/listReducer.ts"],"names":["ADD_LIST","GET_LISTS","GET_LIST_BY_ID","SET_LISTID_TO_DELETE","SET_LIST_TO_EDIT","DELETE_LIST","UPDATE_LIST","SET_SELECTED_LIST","ADD_TASK","SET_TASK_TO_DELETE","UNSET_TASK_TO_DELETE","DELETE_TASK","SET_TASK_TO_EDIT","UNSET_TASK_TO_EDIT","UPDATE_TASK","initialState","lists","listIdToDelete","listToEdit","listById","selectedList","taskToDelete","taskToEdit","getListsFromLS","localStorage","getItem","JSON","parse","saveListsToLS","setItem","stringify","state","action","listsFromLS","type","clonedListsFromLS","payload","id","list","clonedListsFromLS2","listId","clonedListsFromLS3","name","clonedListsFromLS4","tasks","push","task","clonedListsFromLS5","clonedTasks","find","splice","indexOf","clonedListsFromLS6","clonedList","clonedTasks2","task2","taskId","clonedTask","taskName","completed","taskState","updatedTasks","map"],"mappings":"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","sourcesContent":["import { ListsAction, ListState, Lists, ADD_LIST, GET_LISTS, GET_LIST_BY_ID, SET_LISTID_TO_DELETE, SET_LIST_TO_EDIT, DELETE_LIST, UPDATE_LIST, SET_SELECTED_LIST, ADD_TASK, SET_TASK_TO_DELETE, UNSET_TASK_TO_DELETE, DELETE_TASK, SET_TASK_TO_EDIT, UNSET_TASK_TO_EDIT, UPDATE_TASK } from \"../types\";\n\nconst initialState: ListState = {\n  lists: {},\n  listIdToDelete: '',\n  listToEdit: null,\n  listById: null,\n  selectedList: null,\n  taskToDelete: null,\n  taskToEdit: null\n}\n\n// Helper functions\nconst getListsFromLS = (): Lists => {\n  if(localStorage.getItem('task_list')) {\n    return JSON.parse(localStorage.getItem('task_list') || '{}');\n  }\n\n  return {};\n}\n\nconst saveListsToLS = (lists: Lists) => {\n  localStorage.setItem('task_list', JSON.stringify(lists));\n}\n\nexport default (state = initialState, action: ListsAction): ListState => {\n  const listsFromLS = getListsFromLS();\n\n  switch(action.type) {\n    case ADD_LIST:\n      const clonedListsFromLS = {...listsFromLS};\n      clonedListsFromLS[action.payload.id] = action.payload;\n      saveListsToLS(clonedListsFromLS);\n      return {\n        ...state,\n        lists: clonedListsFromLS\n      }\n\n    case GET_LISTS:\n      return {\n        ...state,\n        lists: listsFromLS\n      }\n\n    case GET_LIST_BY_ID:\n      const list = listsFromLS[action.payload];\n      return {\n        ...state,\n        listById: list\n      }\n\n    case SET_LISTID_TO_DELETE:\n      return {\n        ...state,\n        listIdToDelete: action.payload\n      }\n\n    case SET_LIST_TO_EDIT:\n      const listToEdit = listsFromLS[action.payload];\n      return {\n        ...state,\n        listToEdit\n      }\n\n    case DELETE_LIST:\n      const clonedListsFromLS2 = {...listsFromLS};\n      const listId = clonedListsFromLS2[action.payload].id;\n      delete clonedListsFromLS2[action.payload];\n      saveListsToLS(clonedListsFromLS2);\n      return {\n        ...state,\n        lists: clonedListsFromLS2,\n        listIdToDelete: '',\n        listById: null,\n        selectedList: state.selectedList && listId === state.selectedList.id ? null : state.selectedList\n      }\n\n    case UPDATE_LIST:\n      const clonedListsFromLS3 = {...listsFromLS};\n      clonedListsFromLS3[action.payload.id].name = action.payload.name;\n      saveListsToLS(clonedListsFromLS3);\n      return {\n        ...state,\n        lists: clonedListsFromLS3,\n        listToEdit: null\n      }\n\n    case SET_SELECTED_LIST:\n      const selectedList = getListsFromLS()[action.payload];\n      return {\n        ...state,\n        selectedList: selectedList\n      }\n\n    case ADD_TASK:\n      const clonedListsFromLS4 = {...listsFromLS};\n      clonedListsFromLS4[action.payload.list.id].tasks.push(action.payload.task);\n      saveListsToLS(clonedListsFromLS4);\n      return {\n        ...state,\n        lists: clonedListsFromLS4,\n        selectedList: clonedListsFromLS4[action.payload.list.id]\n      }\n\n    case SET_TASK_TO_DELETE:\n      return {\n        ...state,\n        taskToDelete: {\n          task: action.payload.task,\n          list: action.payload.list\n        }\n      }\n\n    case UNSET_TASK_TO_DELETE:\n      return {\n        ...state,\n        taskToDelete: null\n      }\n\n    case DELETE_TASK:\n      const clonedListsFromLS5 = {...listsFromLS};\n      const clonedTasks = [...clonedListsFromLS5[state.taskToDelete!.list.id].tasks];\n      const task = clonedTasks.find(task => task.id === state.taskToDelete!.task.id);\n      clonedTasks.splice(clonedTasks.indexOf(task!), 1);\n      clonedListsFromLS5[state.taskToDelete!.list.id].tasks = clonedTasks;\n      saveListsToLS(clonedListsFromLS5);\n      return {\n        ...state,\n        lists: clonedListsFromLS5,\n        selectedList: clonedListsFromLS5[state.taskToDelete!.list.id],\n        taskToDelete: null\n      }\n\n    case SET_TASK_TO_EDIT:\n      return {\n        ...state,\n        taskToEdit: {\n          task: action.payload.task,\n          list: action.payload.list\n        }\n      }\n\n    case UNSET_TASK_TO_EDIT:\n      return {\n        ...state,\n        taskToEdit: null\n      }\n\n    case UPDATE_TASK:\n      const clonedListsFromLS6 = {...listsFromLS};\n      const clonedList = {...clonedListsFromLS6[action.payload.list.id]};\n      const clonedTasks2 = [...clonedList.tasks];\n      const task2 = clonedTasks2.find(task => task.id === action.payload.taskId);\n      const clonedTask = {...task2!};\n      clonedTask.name = action.payload.taskName;\n      clonedTask.completed = action.payload.taskState;\n      const updatedTasks = clonedTasks2.map(task => task.id === clonedTask.id ? clonedTask : task);\n      clonedList.tasks = updatedTasks;\n      clonedListsFromLS6[clonedList.id] = clonedList;\n      saveListsToLS(clonedListsFromLS6);\n\n      return {\n        ...state,\n        lists: clonedListsFromLS6,\n        selectedList: clonedList,\n        taskToEdit: null\n      }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}